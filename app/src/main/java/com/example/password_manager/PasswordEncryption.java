package com.example.password_manager;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.security.SecureRandom;

public class PasswordEncryption {

    private Cipher encryptionCipher;
    private Cipher decryptionCipher;
    private final int length = 128;
    private static final int KEY_SIZE = 16;
    private static final int IV_SIZE = 12;

    //Generating Cipher Key
    public static String generateKey() {
        SecureRandom random = new SecureRandom();
        byte[] keyBytes = new byte[KEY_SIZE];
        random.nextBytes(keyBytes);
        return Base64.getEncoder().encodeToString(keyBytes);
    }

    //Generating Initialization Vector
    public static String generateIV() {
        SecureRandom random = new SecureRandom();
        byte[] ivBytes = new byte[IV_SIZE];
        random.nextBytes(ivBytes);
        return Base64.getEncoder().encodeToString(ivBytes);
    }

    //Encrypt plaintext
    public String encrypt(String pass, String key, String iv) throws Exception {

        //Plaintext is converted to a byte array
        byte[] passBytes = pass.getBytes();

        //Key and iv are decoded to get byte array
        byte[] keyBytes = Base64.getDecoder().decode(key);
        byte[] ivBytes = Base64.getDecoder().decode(iv);

        //AES encryption
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
        encryptionCipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec spec = new GCMParameterSpec(length, ivBytes);
        encryptionCipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);
        byte[] encryptedBytes = encryptionCipher.doFinal(passBytes);

        //Encode binary data as a string
        return encode(encryptedBytes);
    }

    //Decrypt ciphertext
    public String decrypt(String encryptedPass, String key, String iv) throws Exception {

        //Decode a Base64-encoded string into a byte array
        byte[] encryptedBytes = decode(encryptedPass);

        //Key and iv are decoded to get byte array
        byte[] keyBytes = Base64.getDecoder().decode(key);
        byte[] ivBytes = Base64.getDecoder().decode(iv);

        //AES decryption
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
        decryptionCipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec spec = new GCMParameterSpec(length, ivBytes);
        decryptionCipher.init(Cipher.DECRYPT_MODE, keySpec, spec);
        byte[] decryptedBytes = decryptionCipher.doFinal(encryptedBytes);
        return new String(decryptedBytes);
    }

    //Encode binary data as a string
    private String encode(byte[] data) {
        return Base64.getEncoder().encodeToString(data);
    }

    //Decode a Base64-encoded string into a byte array
    private byte[] decode(String data) {
        return Base64.getDecoder().decode(data);
    }

    //Testing the use of the defined methods above
    public static void main(String[] args) {
        try {
            String password = "AsecurePassword123!";
            //String key = "OAOgzXXUdMbclmf9ocGdWw=="; // This can be a random string generated by the user or another secure source
            //String iv = "cr3jYzXbq8yxfk6T"; // This can be a random string generated by the user or another secure source
            String key = generateKey();
            String iv = generateIV();

            PasswordEncryption passEncrypt = new PasswordEncryption();
            String encryptedPass = passEncrypt.encrypt(password, key, iv);
            String decryptedPass = passEncrypt.decrypt(encryptedPass, key, iv);

            System.out.println("Encrypted Data : " + encryptedPass);
            System.out.println("Decrypted Data : " + decryptedPass);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}